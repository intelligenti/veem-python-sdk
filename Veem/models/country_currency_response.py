# coding: utf-8

"""
    Veem API

    Veem REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: dev@veem.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CountryCurrencyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'country_name': 'str',
        'invoice_attachment_required': 'bool',
        'purpose_of_payment_required': 'bool',
        'receiving_currencies': 'list[str]',
        'sending_currencies': 'list[str]'
    }

    attribute_map = {
        'country': 'country',
        'country_name': 'countryName',
        'invoice_attachment_required': 'invoiceAttachmentRequired',
        'purpose_of_payment_required': 'purposeOfPaymentRequired',
        'receiving_currencies': 'receivingCurrencies',
        'sending_currencies': 'sendingCurrencies'
    }

    def __init__(self, country=None, country_name=None, invoice_attachment_required=None, purpose_of_payment_required=None, receiving_currencies=None, sending_currencies=None):  # noqa: E501
        """CountryCurrencyResponse - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._country_name = None
        self._invoice_attachment_required = None
        self._purpose_of_payment_required = None
        self._receiving_currencies = None
        self._sending_currencies = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if country_name is not None:
            self.country_name = country_name
        if invoice_attachment_required is not None:
            self.invoice_attachment_required = invoice_attachment_required
        if purpose_of_payment_required is not None:
            self.purpose_of_payment_required = purpose_of_payment_required
        if receiving_currencies is not None:
            self.receiving_currencies = receiving_currencies
        if sending_currencies is not None:
            self.sending_currencies = sending_currencies

    @property
    def country(self):
        """Gets the country of this CountryCurrencyResponse.  # noqa: E501


        :return: The country of this CountryCurrencyResponse.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryCurrencyResponse.


        :param country: The country of this CountryCurrencyResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNDEFINED", "AC", "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CP", "CR", "CS", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DG", "DJ", "DK", "DM", "DO", "DZ", "EA", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "EU", "FI", "FJ", "FK", "FM", "FO", "FR", "FX", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NT", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SF", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SU", "SV", "SX", "SY", "SZ", "TA", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TP", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UK", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "XK", "YE", "YT", "YU", "ZA", "ZM", "ZR", "ZW"]  # noqa: E501
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country` ({0}), must be one of {1}"  # noqa: E501
                .format(country, allowed_values)
            )

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this CountryCurrencyResponse.  # noqa: E501


        :return: The country_name of this CountryCurrencyResponse.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this CountryCurrencyResponse.


        :param country_name: The country_name of this CountryCurrencyResponse.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def invoice_attachment_required(self):
        """Gets the invoice_attachment_required of this CountryCurrencyResponse.  # noqa: E501


        :return: The invoice_attachment_required of this CountryCurrencyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_attachment_required

    @invoice_attachment_required.setter
    def invoice_attachment_required(self, invoice_attachment_required):
        """Sets the invoice_attachment_required of this CountryCurrencyResponse.


        :param invoice_attachment_required: The invoice_attachment_required of this CountryCurrencyResponse.  # noqa: E501
        :type: bool
        """

        self._invoice_attachment_required = invoice_attachment_required

    @property
    def purpose_of_payment_required(self):
        """Gets the purpose_of_payment_required of this CountryCurrencyResponse.  # noqa: E501


        :return: The purpose_of_payment_required of this CountryCurrencyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._purpose_of_payment_required

    @purpose_of_payment_required.setter
    def purpose_of_payment_required(self, purpose_of_payment_required):
        """Sets the purpose_of_payment_required of this CountryCurrencyResponse.


        :param purpose_of_payment_required: The purpose_of_payment_required of this CountryCurrencyResponse.  # noqa: E501
        :type: bool
        """

        self._purpose_of_payment_required = purpose_of_payment_required

    @property
    def receiving_currencies(self):
        """Gets the receiving_currencies of this CountryCurrencyResponse.  # noqa: E501


        :return: The receiving_currencies of this CountryCurrencyResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._receiving_currencies

    @receiving_currencies.setter
    def receiving_currencies(self, receiving_currencies):
        """Sets the receiving_currencies of this CountryCurrencyResponse.


        :param receiving_currencies: The receiving_currencies of this CountryCurrencyResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["UNDEFINED", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RUR", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"]  # noqa: E501
        if not set(receiving_currencies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `receiving_currencies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(receiving_currencies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._receiving_currencies = receiving_currencies

    @property
    def sending_currencies(self):
        """Gets the sending_currencies of this CountryCurrencyResponse.  # noqa: E501


        :return: The sending_currencies of this CountryCurrencyResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._sending_currencies

    @sending_currencies.setter
    def sending_currencies(self, sending_currencies):
        """Sets the sending_currencies of this CountryCurrencyResponse.


        :param sending_currencies: The sending_currencies of this CountryCurrencyResponse.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["UNDEFINED", "AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RUR", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "SSP", "STD", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "USS", "UYI", "UYU", "UZS", "VEF", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"]  # noqa: E501
        if not set(sending_currencies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sending_currencies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(sending_currencies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._sending_currencies = sending_currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryCurrencyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
